nCr     sw 5 6 0       // i want to make sure no negative integer can come here
------ lw 0 6 neg5
------ add 5 6 5
------ sw 5 7 4     ///save return address
------ sw 5 2 3      ///save r address
------ sw 5 1 2      ///save n address
------ lw 0 4 sltAdr      //check if n<r
------ jalr 4 7
------ sw 5 3 1            ///save result from slt(n<r) to stack
------ sw 0 2 6
------ lw 0 2 0
------ lw 0 4 sltAdr    //check if n<0
------ jalr 4 7
------ lw 0 1 3        // "(n<0)" or (n<r)
------ lw 5 2 1        //  (n<0) or "(n<r)"  
------ jalr or
------ sw 5 3 1      //store result from [(n<0) or (n<r)]
------ lw 5 1 3      // put r to $1
------ lw 0 2 0
------ lw 0 4 sltAdr 
------ jalr 4 7
------ lw 0 2 3        //    [(n<0) or (n<r)] or "(r<0)"
------ lw 5 1 1        //   "[(n<0) or (n<r)]" or (r<0)  
------ jalr or
------ lw 0 6 pos1
------ beq 3 6 ncrErr              //if the test case fails, error occured
------ lw 5 1 2  @@@@@@@@@@@@@@@@@@@@ restore n
------ lw 5 2 3 @@@@@@@@@@@@@@@@@@@@ restore r
------ beq 2 0 nCris1 @@@@@@@@@@@@@@ test if r==0 
------ beq 1 2 nCris1 @@@@@@@@@@@@@@@@@@ test if n==r
------ lw 0 6 neg1    @@@@@@@@@@@@@@@@@@@@   recursive part 1
------ add 1 6 1
------ lw 0 4 nCrAdr 
------ jalr 4 7
------ sw 5 3 1    //save the first part to the stack first
------ lw 5 1 2     @@@@@@@@@@@@@@@@@@@@ restore n
------ lw 5 2 3     @@@@@@@@@@@@@@@@@@@@ restore r
------ lw 5 7 4     @@@@@@@@@@@@@@@@@@@@ restore return address
------ lw 0 6 pos5
------ add 5 6 5
------ lw 5 6 0
------ lw 0 6 neg1    @@@@@@@@@@@@@@@@@@@@   recursive part 2
------ add 1 6 1
------ add 2 6 2
------ lw 0 4 nCrAdr 
------ jalr 4 7
------ lw 5 4 1     @@@@@@@@@@@@@@@@@@@@ restore the first part
------ lw 5 1 2     @@@@@@@@@@@@@@@@@@@@ restore n
------ lw 5 2 3     @@@@@@@@@@@@@@@@@@@@ restore r
------ lw 5 7 4     @@@@@@@@@@@@@@@@@@@@ restore return address
------ lw 0 6 pos5
------ add 5 6 5
------ lw 5 6 0
------ add 3 4 3      @@@@@@nCr(n-1,r)+nCr(n-1,r-1)
------ jalr 7 4     ////return
nCris1 add 0 6 pos1
------ lw 0 3 6   /// result is 1
------ lw 5 1 2
------ lw 5 2 3
------ lw 5 7 4
------ lw 0 6 pos5
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4  // return
nCrErr lw 5 1 2
------ lw 5 2 3
------ lw 5 7 4
------ lw 0 6 pos5
------ add 5 6 5
------ lw 5 6 0
------ halt              ////ERROR
------ noop  @@@@@@@@@@@@@@@@@ these lines are associated for nCr function     
ncrErr .fill nCrErr
nCrIS1 .fill nCris1
nCrAdr .fill nCr
------ noop  @@@@@@@@@@@@@@@@@
pos1 .fill 1
pos5 .fill 5
neg1 .fill -1
neg5 .fill -5
