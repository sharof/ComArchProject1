 C code:
int fact (int n)
{
if (n < 1) return f;
else return (n * fact(n - 1));
}
– Argument n in $a0
– Result in $v0


MIPS code:
fact:
addi $sp, $sp, -8 										# adjust stack for 2 items
sw $ra, 4($sp) 							# save return address
sw $a0, 0($sp) 								# save argument
slti $t0, $a0, 1 									# test for n < 1
beq $t0, $zero, L1
addi $v0, $zero, 1 									# if so, result is 1
addi $sp, $sp, 8 											# pop 2 items from stack
jr $ra                                                                                                  # and return
L1: addi $a0, $a0, -1 											# else decrement n
jal fact # recursive call
lw $a0, 0($sp) 													# restore original n
lw $ra, 4($sp) 									# and return address
addi $sp, $sp, 8 						# pop 2 items from stack
mul $v0, $a0, $v0 											# multiply to get result
jr $ra  											# and return



OUR code:
------ lw 0 5 immax
fct sw 5 6 0  
------ lw 0 6 neg3
------ add 5 6 5
------ sw 5 7 2
------ sw 5 1 1 
------ lw 0 6 pos1
------ lw 0 2 6
------ lw 0 4 sltAdr # test for n < 1
------ jalr 4 7
------ beq 3 0 L1
------ add 0 6 3      # if so, result is 1
------ lw 5 1 1    # restore original n
------ lw 5 7 2    # and return address
------ lw 0 6 pos3
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4    #and return
L1     lw 0 6 neg1 
------ add 1 6 1    # else decrement n
------ lw 0 4 fctAdr
------ jalr 4 7
------ lw 5 1 1 
------ lw 5 7 2
------ lw 0 6 pos3
------ add 5 6 5
------ lw 5 6 0






slt    sw 5 6 0       @@@@@@@@@@@@@ slt(a,b)
------ lw 0 6 neg3
------ add 5 6 5
------ sw 5 2 2
------ sw 5 1 1 
------ lw 0 4 subAdr     @@@@@@@@@@@@@ procedure
------ jalr 4 7      @@@@@@@@@ call sub(a,b) first
------ lw 0 1 3 ///put that result into $1 for isNeg(a-b)
------ lw 0 4 isNegA
------ jalr 4 7  ///call isNeg(a-b)
------ add 0 3 3 ///1 if a<b, 0 if isn't
------ lw 5 1 1    @@@@@@@@@@@@@end of slt(a,b), restore original variables
------ lw 5 2 2
------ lw 0 6 pos3
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4 @@@@@@@@@@@@@return from slt(a,b) ////
sub    sw 5 6 0           @@@@@@@@@@@@@sub(a,b)
------ lw 0 6 neg3
------ add 5 6 5
------ sw 5 2 2
------ sw 5 1 1
------	nand	2 2 2   @@@@@@@@@@@@@procedure
------  add     2 pos1 2
------  add     1 2 3 
------ lw 5 1 1   @@@@@@@@@@@@@end of sub(a,b), restore original variables
------ lw 5 2 2
------ lw 0 6 pos3
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4     @@@@@@@@@@@@@return from sub(a,b) ////
isNeg    sw 5 6 0         @@@@@@@@@@@@@isNeg(a)   
------ lw 0 6 neg2
------ add 5 6 5
------ sw 5 1 1
------ lw 0 2 immmin     @@@@@@@@@@@@@@@@procedure
------ lw 0 4 andAdr
------ jalr 4 7          ///// $1 AND with -32768
------ lw 0 6 3 
------ beq 2 6 2 @@@@@@@if is less than zero,negative sign bit must be 1
------ lw 0 3 0 @@@@@@@ return 0 is this is false
------ beq 1 1 1
------ lw 0 3 pos1 @@@@@@@ return 1 is this is true
------ lw 5 1 1 @@@@@@@@@@@@@end of isNeg(a), restore original variables
------ lw 0 6 pos2
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4 @@@@@@@@@@@@@return from isNeg(a) ////
------ noop @@@@@@@@@@@@@@@@some constants
isNegA .fill isNeg
sltAdr .fill slt
subAdr .fill sub
pos1 .fill 1
pos2 .fill 2
pos3 .fill 3
neg1 .fill -1
neg2 .fill -2
neg3 .fill -3
immmax .fill 32767