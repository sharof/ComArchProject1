mult sw 5 6 0         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ mult(a,b)   
------ lw 0 6 neg4        @@@@@@ prepare 4 items
------ add 5 6 5
------ sw 5 7 3
------ sw 5 2 2
------ sw 5 1 1
------ beq 1 0 get0       /// check if a==0
------ beq 2 0 get0       /// check if b==0
------ lw 0 6 pos1
------ beq 1 6 getb         /// check if a==1
------ lw 0 6 pos2
------ beq 1 6 bplusb         /// check if a==2
------ lw 0 4 sltAdr         @@@@@@@check if a is less than b
------ jalr 4 7        
------ lw 0 6 pos1
------ beq 3 6 mulrcr  @@@@@@@@ if is,go to recursion part
------ lw 0 4 subAdr   @@@@@@@@ if isn't, check if a == b  (because a-b=0)
------ jalr 4 7
------ beq 0 3 mulrcr        @@@@@@@if a == b ,go to recursion part
------ beq 0 0 btimea     @@@@@@@   this means if a>b, swap a and b.
get0 add 0 0 3               @@@@@@ if a==0 or b==0, return 0
------ lw 5 1 1                 @@@@@@ popping 4 items from stacks
------ lw 5 2 2
------ lw 5 7 3
------ lw 0 6 pos4
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4                         @@@@return
getb add 0 2 3               @@@@@@ if a==1, return b
------ lw 5 1 1                  @@@@@@ popping 4 items from stacks
------ lw 5 2 2
------ lw 5 7 3
------ lw 0 6 pos4
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4
bplusb add 2 2 3                @@@@@@ if a==2, return b+b
------ lw 5 1 1                  @@@@@@ popping 4 items from stacks
------ lw 5 2 2
------ lw 5 7 3
------ lw 0 6 pos4
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4           @@@@return
btimea lw 5 1 1  @@@@@@ to optimize the multiplication a should be less than b
------ lw 5 2 2             @@@@@@ popping 4 items from stacks
------ lw 5 7 3
------ lw 0 6 pos4
------ add 5 6 5
------ lw 5 6 0
------ add 0 1 4      //move a to $4
------ add 0 2 1       //write b in to $1
------ add 0 4 2          // move a from $4 to $2
------ lw 0 4 mulAdr 
------ jalr 4 7               //call the function again
------ jalr 7 4                  @@@@return
mulrcr lw 0 6 neg1       
------ add 1 6 1            @@@@@decrease a by 1
------ lw 0 4 mulAdr       @@@@@@ recursive part
------ jalr 4 7
------ lw 5 1 1           @@@@restore original a,b,$6,and return address
------ lw 5 2 2
------ lw 5 7 3
------ lw 0 6 pos4
------ add 5 6 5
------ lw 5 6 0
------ add 3 2 3        @@@@@@ add to get result
------ jalr 7 4        @@@@@@@@@@@@@@@@@@@@@@@@@return