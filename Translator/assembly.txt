------ lw 0 5 immmax ///////intialize the stack pointer
------ halt
sub    sw 5 6 0           @@@@@@@@@@@@@sub(a,b)
------ lw 0 6 neg3
------ add 5 6 5
------ sw 5 2 2
------ sw 5 1 1
------	nand	2 2 2   @@@@@@@@@@@@@procedure
------ lw 0 6 pos1
------ add 2 6 2
------ add 1 2 3 
------ lw 5 1 1   @@@@@@@@@@@@@end of sub(a,b), restore original variables
------ lw 5 2 2
------ lw 0 6 pos3
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4     @@@@@@@@@@@@@return from sub(a,b) ////
neg    sw 5 6 0           @@@@@@@@@@@@@neg(a) AKA a times -1
------ lw 0 6 neg2
------ add 5 6 5
------ sw 5 1 1
------ nand 1 1 1   @@@@@@@@@@@@@procedure
------ lw 0 6 pos1
------ add 1 6 3
------ lw 5 1 1    @@@@@@@@@@@@@end of neg(a), restore original variables
------ lw 0 6 pos2
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4 @@@@@@@@@@@@@return from neg(a,b) ////
slt  sw 5 6 0           @@@@@@@@@@@@@slt(a,b)
------ lw 0 6 neg3
------ add 5 6 5
------ sw 5 2 2
------ sw 5 1 1   
------ lw 0 4 subAdr   @@@@@@@@@@@@@procedure
------ jalr 4 7
------ add 0 3 1
------ lw 0 4 isNegA                   
------ jalr 4 7
------ add 0 3 3       @@@@@@ return isNeg(a-b)
------ lw 5 1 1    @@@@@@@@@@@@@end of slt(a,b), restore original variables
------ lw 5 2 2
------ lw 0 6 pos3
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4 @@@@@@@@@@@@@return from slt(a,b) ////
sge  sw 5 6 0           @@@@@@@@@@@@@sge(a,b) test if a>=b
------ lw 0 6 neg3
------ add 5 6 5
------ sw 5 2 2
------ sw 5 1 1   
------ lw 0 4 subAdr   @@@@@@@@@@@@@procedure
------ jalr 4 7
------ add 0 3 1
------ lw 0 4 isNegA                   call isNeg(a-b)
------ jalr 4 7
------ beq 3 0 2   if a-b is not negative, this mean a>=b,so return 1 (skip 2 instructions)
------ add 0 0 3       if a-b is negative, return 0       
------ beq 0 0 2      skip 2 instructions to end the function
------ lw 0 6 pos1
------ add 0 6 3
------ lw 5 1 1    @@@@@@@@@@@@@end of sge(a,b), restore original variables
------ lw 5 2 2
------ lw 0 6 pos3
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4 @@@@@@@@@@@@@return from sge(a,b) ////
mult sw 5 6 0         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ mult(a,b)   
------ lw 0 6 neg4        @@@@@@ prepare 4 items
------ add 5 6 5
------ sw 5 7 3
------ sw 5 2 2
------ sw 5 1 1
------ beq 1 0 get0       /// check if a==0
------ beq 2 0 get0       /// check if b==0
------ lw 0 6 pos1
------ beq 1 6 getb         /// check if a==1
------ lw 0 6 pos2
------ beq 1 6 bplusb         /// check if a==2
------ lw 0 4 sltAdr         @@@@@@@check if a is less than b
------ jalr 4 7        
------ lw 0 6 pos1
------ beq 3 6 mulrcr  @@@@@@@@ if is,go to recursion part
------ lw 0 4 subAdr   @@@@@@@@ if isn't, check if a == b  (because a-b=0)
------ jalr 4 7
------ beq 0 3 mulrcr        @@@@@@@if a == b ,go to recursion part
------ beq 0 0 btimea     @@@@@@@   this means if a>b, swap a and b.
get0 add 0 0 3               @@@@@@ if a==0 or b==0, return 0
------ lw 5 1 1                 @@@@@@ popping 4 items from stacks
------ lw 5 2 2
------ lw 5 7 3
------ lw 0 6 pos4
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4                         @@@@return
getb add 0 2 3               @@@@@@ if a==1, return b
------ lw 5 1 1                  @@@@@@ popping 4 items from stacks
------ lw 5 2 2
------ lw 5 7 3
------ lw 0 6 pos4
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4
bplusb add 2 2 3                @@@@@@ if a==2, return b+b
------ lw 5 1 1                  @@@@@@ popping 4 items from stacks
------ lw 5 2 2
------ lw 5 7 3
------ lw 0 6 pos4
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4           @@@@return
btimea lw 5 1 1  @@@@@@ to optimize the multiplication a should be less than b
------ lw 5 2 2             @@@@@@ popping 4 items from stacks
------ lw 5 7 3
------ lw 0 6 pos4
------ add 5 6 5
------ lw 5 6 0
------ add 0 1 4      //move a to $4
------ add 0 2 1       //write b in to $1
------ add 0 4 2          // move a from $4 to $2
------ lw 0 4 mulAdr 
------ jalr 4 7               //call the function again
------ jalr 7 4                  @@@@return
mulrcr lw 0 6 neg1       
------ add 1 6 1            @@@@@decrease a by 1
------ lw 0 4 mulAdr       @@@@@@ recursive part
------ jalr 4 7
------ lw 5 1 1           @@@@restore original a,b,$6,and return address
------ lw 5 2 2
------ lw 5 7 3
------ lw 0 6 pos4
------ add 5 6 5
------ lw 5 6 0
------ add 3 2 3        @@@@@@ add to get result
------ jalr 7 4        @@@@@@@@@@@@@@@@@@@@@@@@@return
or    sw 5 6 0       @@@@@@@@@@@@@ or(a,b)
------ lw 0 6 neg3
------ add 5 6 5
------ sw 5 2 2
------ sw 5 1 1 
------ nand 1 1 1 @@@@@@@@@@@@@ procedure
------ nand 2 2 2
------ nand 1 2 3 
------ lw 5 1 1    @@@@@@@@@@@@@ end of or(a,b), restore original variables
------ lw 5 2 2
------ lw 0 6 pos3
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4    @@@@@@@@@@@@@return from or(a,b) ////
and    sw 5 6 0  @@@@@@@@@@@@@ and(a,b) ////
------ lw 0 6 neg3
------ add 5 6 5
------ sw 5 2 2
------ sw 5 1 1
------ nand 1 2 6 @@@@@@@@@@@@@ procedure
------ nand 6 6 3
------ lw 5 1 1    @@@@@@@@@@@@@end of and(a,b), restore original variables
------ lw 5 2 2
------ lw 0 6 pos3
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4 @@@@@@@@@@@@@return from and(a,b) ////
isNeg    sw 5 6 0         @@@@@@@@@@@@@isNeg(a)   
------ lw 0 6 neg3
------ add 5 6 5
------ sw 5 2 2
------ sw 5 1 1
------ lw 0 2 immmin     @@@@@@@@@@@@@@@@procedure
------ lw 0 4 andAdr
------ jalr 4 7          ///// $1 AND with -32768
------ add 0 3 6 
------ beq 2 6 2 @@@@@@@if is less than zero,negative sign bit must be 1
------ add 0 0 3 @@@@@@@ return 0 is this is false
------ beq 1 1 1
------ lw 0 3 pos1 @@@@@@@ return 1 is this is true
------ lw 5 1 1 @@@@@@@@@@@@@end of isNeg(a), restore original variables
------ lw 5 2 2
------ lw 0 6 pos3
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4 @@@@@@@@@@@@@return from isNeg(a) ////
nCr     sw 5 6 0       // @@@@@@@@@@@@@@@@@@@@@@@@@@@@nCr(n,r)i want to make sure no negative integer can come here
------ lw 0 6 neg5
------ add 5 6 5
------ sw 5 7 4     ///save return address
------ sw 5 2 3      ///save r address
------ sw 5 1 2      ///save n address
------ lw 0 4 sltAdr      //check if n<r
------ jalr 4 7
------ sw 5 3 1            ///save result from slt(n<r) to stack
------ add 0 2 6
------ add 0 0 2
------ lw 0 4 sltAdr    //check if n<0
------ jalr 4 7
------ add 0 3 1        // "(n<0)" or (n<r)
------ lw 5 2 1        //  (n<0) or "(n<r)"  
------ jalr or
------ sw 5 3 1      //store result from [(n<0) or (n<r)]
------ lw 5 1 3      // put r to $1
------ add 0 0 2
------ lw 0 4 sltAdr 
------ jalr 4 7
------ add 0 3 2        //    [(n<0) or (n<r)] or "(r<0)"
------ lw 5 1 1        //   "[(n<0) or (n<r)]" or (r<0)  
------ jalr or
------ lw 0 6 pos1
------ beq 3 6 ncrErr              //if the test case fails, error occured
------ lw 5 1 2  @@@@@@@@@@@@@@@@@@@@ restore n
------ lw 5 2 3 @@@@@@@@@@@@@@@@@@@@ restore r
------ beq 2 0 nCris1 @@@@@@@@@@@@@@ test if r==0 
------ beq 1 2 nCris1 @@@@@@@@@@@@@@@@@@ test if n==r
------ lw 0 6 neg1    @@@@@@@@@@@@@@@@@@@@   recursive part 1
------ add 1 6 1
------ lw 0 4 nCrAdr 
------ jalr 4 7
------ sw 5 3 1    //save the first part to the stack first
------ lw 5 1 2     @@@@@@@@@@@@@@@@@@@@ restore n
------ lw 5 2 3     @@@@@@@@@@@@@@@@@@@@ restore r
------ lw 5 7 4     @@@@@@@@@@@@@@@@@@@@ restore return address
------ lw 0 6 pos5
------ add 5 6 5
------ lw 0 6 neg1    @@@@@@@@@@@@@@@@@@@@   recursive part 2
------ add 1 6 1
------ add 2 6 2
------ lw 0 4 nCrAdr 
------ jalr 4 7
------ lw 5 4 1     @@@@@@@@@@@@@@@@@@@@ restore the first part
------ lw 5 1 2     @@@@@@@@@@@@@@@@@@@@ restore n
------ lw 5 2 3     @@@@@@@@@@@@@@@@@@@@ restore r
------ lw 5 7 4     @@@@@@@@@@@@@@@@@@@@ restore return address
------ lw 0 6 pos5
------ add 5 6 5
------ lw 5 6 0
------ add 3 4 3      @@@@@@nCr(n-1,r)+nCr(n-1,r-1)
------ jalr 7 4     ////return
nCris1 add 0 6 pos1
------ add 0 6 3   /// result is 1
------ lw 5 1 2
------ lw 5 2 3
------ lw 5 7 4
------ lw 0 6 pos5
------ add 5 6 5
------ lw 5 6 0
------ jalr 7 4  // return
nCrErr lw 5 1 2
------ lw 5 2 3
------ lw 5 7 4
------ lw 0 6 pos5
------ add 5 6 5
------ lw 5 6 0
------ halt              ////ERROR @@@@@@@@@@@@@@@@@@@@ END of nCr(n,r) ////
------ noop @@@@@@@@@@@@@@@@some constants
pos1 .fill 1
pos2 .fill 2
pos3 .fill 3
pos4 .fill 4
pos5 .fill 5
pos6 .fill 6
pos7 .fill 7
pos8 .fill 8
pos9 .fill 9
pos10 .fill 10
neg1 .fill -1
neg2 .fill -2
neg3 .fill -3
neg4 .fill -4
neg5 .fill -5
neg6 .fill -6
neg7 .fill -7
neg8 .fill -8
neg9 .fill -9
neg10 .fill -10
subAdr .fill sub
orAdr .fill or
andAdr .fill and
isNegA .fill isNeg
negAdr .fill neg
sltAdr .fill slt
sgeAdr .fill sge
------ noop @@@@@@@@@@@@@@@@ these lines are associate for mult
mulAdr .fill mult
get0Ad .fill get0
getbAd .fill getb
BPLUSB .fill bplusb
BTIMEA .fill btimea
MULRCR .fill mulrcr
------ noop @@@@@@@@@@@@@@@@
------ noop  @@@@@@@@@@@@@@@@@ these lines are associated for nCr function     
ncrErr .fill nCrErr
nCrIS1 .fill nCris1
nCrAdr .fill nCr
------ noop  @@@@@@@@@@@@@@@@@
immmax .fill 32767
immmin .fill -32768