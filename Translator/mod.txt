mod sw 5 6 0           @@@@@@@@@@@@@mod(a,b)
------ lw 0 6 neg4
------ add 5 6 5
------ sw 5 7 3
------ sw 5 2 2
------ sw 5 1 1   
------ beq 0 2 nCrErr
------ beq 0 1 get0
------ add 0 2 1       // check if b is negative
------ lw 0 4 isNegA
------ jalr 4 7
------ lw 5 7 3
------ beq 0 3 15   //if b is not negative, go to loop part(skip 16 instructions)
------ lw 5 1 2        //change b from negative to positive
------ lw 0 4 negAdr
------ jalr 4 7
------ lw 5 7 3
------ add 0 3 2      load neg(b) to $2
------ lw 5 1 1       restore a to $1
------ lw 0 4 modAdr
------ jalr 4 7        //return mod (a,neg(b))
------ lw 5 1 1      //restore original a
------ lw 5 2 2      //restore original b
------ lw 5 7 3
------ lw 0 6 pos4
------ add 5 6 5  //move stack pointer up 4 items
------ lw 5 6 0   //restore original $6 
------ jalr 7 4   //return
------ lw 5 7 3        //loop part
------ lw 5 1 1      //restore original a
------ lw 5 2 2      //restore original b
------ lw 0 4 isNegA   // is a negative?
------ jalr 4 7
------ lw 5 7 3
------ beq 3 0 10          //  if a isn't negative,
------ add 1 2 6
------ add 0 0 1
------ lw 0 4 sgeAdr
------ jalr 4 7
------ lw 5 7 3
------ beq 3 0 dismod        if 0>=a+b, go to the result.
------ lw 5 1 1
------ lw 5 2 2
------ add 1 2 1
------ beq 0 0 -10
------ lw 0 4 sgeAdr   // test if a>=b
------ jalr 4 7
------ lw 5 7 3
------ beq 3 0 dismod     // if a<b, exit the loop
------ lw 0 4 subAdr
------ jalr 4 7
------ lw 5 7 3
------ add 0 3 1
------ beq 0 0 -9
dismod add 0 1 3
------ lw 5 1 1 
------ lw 5 2 2
------ lw 5 7 3
------ lw 0 6 pos4
------ add 5 6 5
------ sw 5 6 0 
------ jalr 7 4










skip